{"version":3,"file":"ktngc.js","sourceRoot":"/Users/jetbrains/ivy-code-size/tools/ktngc/src/","sources":["ktngc.ts"],"names":[],"mappings":";;AAAA,0CAA4C;AAC5C,+BAAiC;AACjC,uDAA+E;AAE/E,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC1B,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED,uBAA8B,IAAc;IACpC,IAAA,iDAAsG,EAArG,oBAAO,EAAE,wBAAS,EAAE,oBAAO,EAAE,wBAAoB,EAAE,wBAAS,CAA0C;IAE3G,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC;IAC5B,+CAA+C;IAC/C,gEAAgE;IAChE,iDAAiD;IAE1C,IAAA;;kBAAyB,CAI9B;IAEF,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAEzC,YAAY;AAChB,CAAC;AAjBD,sCAiBC;AAED,6BAA6B,cAA8B;IACvD,IAAM,iBAAiB,GAAG,EAAE,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;IACrE,EAAE,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3B,IAAM,UAAU,GAA6B;YACzC,mBAAmB,EAAE,cAAM,OAAA,EAAE,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAA5B,CAA4B;YACvD,oBAAoB,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,EAAR,CAAQ;YAC1C,UAAU,EAAE,cAAM,OAAA,EAAE,CAAC,GAAG,CAAC,OAAO,EAAd,CAAc;SACnC,CAAC;QACF,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,CAAC;IACvE,CAAC;IACD,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import * as ng from \"@angular/compiler-cli\";\nimport * as ts from \"typescript\";\nimport {readCommandLineAndConfiguration} from \"@angular/compiler-cli/src/main\";\n\n// CLI entry point\nif (require.main === module) {\n    const args = process.argv.slice(2);\n    process.exitCode = compileKotlin(args);\n}\n\nexport function compileKotlin(args: string[]) {\n    let {project, rootNames, options, errors: configErrors, emitFlags} = readCommandLineAndConfiguration(args);\n\n    options.enableIvy = 'ngtsc';\n    // let host = ng.createCompilerHost({options});\n    // const program = ng.createProgram({rootNames, host, options});\n    // const emitResult = program!.emit({emitFlags});\n\n    const {diagnostics: compileDiags} = ng.performCompilation(\n        {\n            rootNames, options, emitFlags\n        }\n    );\n\n    return reportErrorsAndExit(compileDiags);\n\n    // return 0;\n}\n\nfunction reportErrorsAndExit(allDiagnostics: ng.Diagnostics): number {\n    const errorsAndWarnings = ng.filterErrorsAndWarnings(allDiagnostics);\n    if (errorsAndWarnings.length) {\n        const formatHost: ts.FormatDiagnosticsHost = {\n            getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n            getCanonicalFileName: fileName => fileName,\n            getNewLine: () => ts.sys.newLine\n        };\n        console.error(ng.formatDiagnostics(errorsAndWarnings, formatHost));\n    }\n    return ng.exitCodeFromResult(allDiagnostics);\n}\n"]}