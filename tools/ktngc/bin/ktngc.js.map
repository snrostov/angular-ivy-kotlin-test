{"version":3,"file":"ktngc.js","sourceRoot":"/Users/jetbrains/ivy-code-size/tools/ktngc/src/","sources":["ktngc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ng from \"@angular/compiler-cli\";\nimport * as ts from \"typescript\";\nimport {EmitHint} from \"typescript\";\nimport {readCommandLineAndConfiguration} from \"@angular/compiler-cli/src/main\";\nimport {\n    ComponentDecoratorHandler,\n    DirectiveDecoratorHandler,\n    InjectableDecoratorHandler,\n    NgModuleDecoratorHandler,\n    SelectorScopeRegistry\n} from \"@angular/compiler-cli/src/ngtsc/annotations\";\nimport {TypeScriptReflectionHost} from \"@angular/compiler-cli/src/ngtsc/metadata\";\nimport {IvyCompilation} from \"@angular/compiler-cli/src/ngtsc/transform\";\nimport {\n    ImportManager,\n    translateExpression,\n    translateStatement\n} from \"@angular/compiler-cli/src/ngtsc/transform/src/translator\";\nimport * as path from \"path\";\nimport {Import} from \"@angular/compiler-cli/src/ngtsc/host/src/reflection\";\n\n// CLI entry point\nif (require.main === module) {\n    const args = process.argv.slice(2);\n    process.exitCode = compileKotlin(args);\n}\n\nexport function compileKotlin(args: string[]) {\n    let {project, rootNames, options, errors: configErrors, emitFlags} = readCommandLineAndConfiguration(args);\n\n    options.enableIvy = 'ngtsc';\n\n    let host = ng.createCompilerHost({options});\n    const program = ng.createProgram({rootNames, host, options});\n\n    const emitResult = emit((program as any)['tsProgram'], host, options);\n\n    return reportErrorsAndExit(emitResult.diagnostics);\n}\n\nfunction emit(\n    tsProg: ts.Program,\n    host: ng.CompilerHost,\n    compilerOpts: ng.CompilerOptions,\n    opts?: {\n        emitFlags?: ng.EmitFlags,\n        cancellationToken?: ts.CancellationToken,\n        customTransformers?: ng.CustomTransformers,\n        emitCallback?: ng.TsEmitCallback,\n        mergeEmitResultsCallback?: ng.TsMergeEmitResultsCallback\n    }\n): ts.EmitResult {\n    const checker = tsProg.getTypeChecker();\n    const reflector = new TypeScriptReflectionHost(checker);\n    const scopeRegistry = new SelectorScopeRegistry(checker, reflector);\n\n    // Set up the IvyCompilation, which manages state for the Ivy transformer.\n    const handlers = [\n        new ComponentDecoratorHandler(checker, reflector, scopeRegistry),\n        new DirectiveDecoratorHandler(checker, reflector, scopeRegistry),\n        new InjectableDecoratorHandler(reflector),\n        new NgModuleDecoratorHandler(checker, scopeRegistry),\n    ];\n\n    const compilation = new IvyCompilation(handlers, checker, reflector);\n    var allDiagnostics: Array<ts.Diagnostic> = [];\n\n    // Analyze every source file in the program.\n    tsProg.getSourceFiles()\n        .forEach(file => {\n            const tsFile = file as ts.SourceFile;\n\n            allDiagnostics = allDiagnostics.concat(compilation.analyze(file));\n        });\n\n    const printer = ts.createPrinter();\n    const emittedFiles: Array<string> = [];\n\n    tsProg.getSourceFiles().forEach(file => {\n        if (file.fileName.endsWith('.d.ts')) {\n            const importManager = new ImportManager();\n            const contents: Array<string> = [];\n\n            var wasCompiled = false;\n\n            const dTsDecoratorsToFilter: Array<{\n                /**\n                 * `Import` by which the decorator was brought into the module in which it was invoked, or `null`\n                 * if the decorator was declared in the same module and not imported.\n                 */\n                import: Import | null;\n                /**\n                 * TypeScript reference to the decorator itself.\n                 */\n                node: ts.Node;\n            }> = [];\n\n            ts.forEachChild(file, node => {\n                if (ts.isClassDeclaration(node)) {\n                    const field = compilation.compileIvyFieldFor(node);\n                    if (field !== undefined && node.name) {\n                        const decorator = compilation.ivyDecoratorFor(node);\n                        if (decorator) dTsDecoratorsToFilter.push(decorator);\n\n                        wasCompiled = true;\n                        const className = node.name.escapedText;\n\n                        const expr = translateExpression(field.initializer, importManager);\n                        const statements = field.statements.map(stmt => printer.printNode(\n                            EmitHint.Unspecified,\n                            translateStatement(stmt, importManager),\n                            file\n                        ));\n\n                        const exprString = printer.printNode(EmitHint.Expression, expr, file);\n                        contents.push(\n                            `// BEGIN class generated by kotlin compiler \\n` +\n                            `export const ${className} = /* @constructor */ function() {};\\n` +\n                            `// END class generated by kotlin compiler \\n` +\n                            `\\n` +\n                            `${className}.${field.field} = ${exprString};` +\n                            `\\n` +\n                            `${statements.join(';\\n')}`\n                        );\n                    }\n                }\n            });\n\n            if (wasCompiled) {\n                // Generate the import statements to prepend.\n                const imports = importManager.getAllImports().map(\n                    i => printer.printNode(\n                        EmitHint.Unspecified,\n                        ts.createImportDeclaration(\n                            undefined, undefined,\n                            ts.createImportClause(undefined, ts.createNamespaceImport(ts.createIdentifier(i.as))),\n                            ts.createLiteral(i.name)\n                        ),\n                        file\n                    )\n                );\n\n                const fileBaseName = path.parse(file.fileName).base;\n                const originalFileName = fileBaseName.substr(0, fileBaseName.length - '.d.ts'.length);\n                const outputFileName = `${compilerOpts.outDir}/${originalFileName}.js`;\n                emittedFiles.push(outputFileName);\n\n                host.writeFile(\n                    outputFileName,\n                    imports.concat([''], contents).join('\\n'),\n                    false,\n                    undefined,\n                    [file]\n                );\n\n                const outputDTsFileName = `${compilerOpts.outDir}/${originalFileName}.d.ts`;\n                emittedFiles.push(outputDTsFileName);\n\n                // collect string before transforming (or offsets will be invalid)\n                // todo: find proper way to remove decorators\n                const strsToRemove: Array<string> = [];\n                dTsDecoratorsToFilter.forEach(item => {\n                    let it = item.import;\n                    if (it) {\n                        // todo: support more cases, example `import {A, B} from \"C\"`\n                        strsToRemove.push(`import {${it.name}} from \"${it.from}\";`, '');\n                    }\n\n                    strsToRemove.push(item.node.getFullText(file));\n                });\n\n                let dTsContents = compilation.transformedDtsFor(file.fileName, file.text);\n                strsToRemove.forEach(item => {\n                    dTsContents = dTsContents.replace(item, '');\n                });\n\n                host.writeFile(\n                    outputDTsFileName,\n                    dTsContents,\n                    false,\n                    undefined,\n                    [file]\n                );\n            }\n        }\n    });\n\n    return {\n        emitSkipped: false,\n        emittedFiles: emittedFiles,\n        diagnostics: allDiagnostics\n    };\n}\n\nfunction reportErrorsAndExit(allDiagnostics: ng.Diagnostics): number {\n    const errorsAndWarnings = ng.filterErrorsAndWarnings(allDiagnostics);\n    if (errorsAndWarnings.length) {\n        const formatHost: ts.FormatDiagnosticsHost = {\n            getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n            getCanonicalFileName: fileName => fileName,\n            getNewLine: () => ts.sys.newLine\n        };\n        console.error(ng.formatDiagnostics(errorsAndWarnings, formatHost));\n    }\n    return ng.exitCodeFromResult(allDiagnostics);\n}\n"]}